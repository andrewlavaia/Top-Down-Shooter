Controls
-------------
a: grab NPC / pickup weapon
b: release NPC / drop weapon
x: throw npc / throw weapon
R: primary attack
L: secondary attack


Weapons
-------------
Weapons can be picked up off the ground in each level. Hero picks up weapons by grabbing them with hands. Each weapon has a durability rating that will destroy the object after a certain number of uses.

Hands:
Primary Attack - Grab: when next to NPC, can grab them and pick them up if hero strength > npc weight, otherwise can only drag them at half speed. When next to weapon/object, equips weapon/object
Secondary Attack - Spin: Mario 64 spinning for throwing purposes

Lasso:
Primary Attack - Rope'em: throws lasso a distance to try and attempts to attach to any npc or other collidable object
Secondary Attack - Swing/Drag: can swing rope Mario 64 style with npc/object attached if strength is high enough
   
Pole: (or any pole-like object - guitars, sledge hammer, tree branch, sign, etc ) 
Primary Attack - Push: can push npcs quickly with a wide range
Secondary Attack - Swing: knockback or knockdown npc

Garbage Can: 
Primary Attack - Throw: hurls garbage can and knocks down npc
Secondary Attack - Stuff: stuffs npc in garbage can allowing hero to roll the can


NPCs
---------------
Old Man: 
speed - slow 
weight - light

Regular Adult:
speed - average 
weight - average

Child:
speed - very fast 
weight - very light

Biker
speed - slow 
weight - heavy

Sumo
speed - slowest 
weight - heaviest

Collidable Objects
---------------------
SubwayCar - no effect on hero or weapon, but score increases if NPC collides
ImmovableObject - (ie a pillar) nothing can pass through
SubwayRail - Hero or NPC die if they touch 
PlatformEdge - NPCs will not walk over unless they are pushed, thrown, or otherwise forced over



Implementation Details
-------------------------
MapManager class needs to change. Should just load a simple image.

Can create one additional base class Entity->AnimatedEntity,ImmovableEntity. Level can then hold a single vector populated with all Entity (which will greatly simplify drawing and collision logic)

Each animatedEntity can have its own collision logic wrapped in an overloaded function shown below. The animatedEntity will react differently depending on what object it collided with.					
	Collided(const NPC& n);
	Collided(const Hero& h);
	Collided(const Weapon& w);
	Collided(const Collidable& c);


Features for future version
----------------------------
- Active Weapon Icon
- Animated subway cart
- Brainstorm: security cameras to see if abuse caught on film in later levels?
- Brainstorm: 300 style speed up and slow time affect
- Brainstorm: every npc has a timer above head to determine whether they are on time, late, or fed up
- Brainstorm: survival of the swarm



States Needed
--------------------------
start menu
stats screen
hero select screen
victory / game over screen
level select/debriefing screen

